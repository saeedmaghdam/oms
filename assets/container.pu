@startuml

!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
!include variables.pu

AddElementTag("events", $shape=RoundedBoxShape(), $bgColor="lightSkyBlue", $fontColor="white")

title $applicationName - Container Diagram

System_Ext(kucoin, "KuCoin", "Sends orders & trades, order book to the OMS")

Enterprise_Boundary(oms, $applicationName) {
	System_Boundary(oms_boundary, "Order Management System") {
		System_Boundary(om, "Order Management") {
			Container(om_api, "Api", "API")
			Container(om_cc, "Commission Calculator", "Calculates calculate based on the last exchange rules.")
			Container(om_cm, "Customer Management", "Manage customer and customer trading code information")
			Container(om_pm, "Portfolio Management", "Manage customers portfolio and assets they have")
			Container(om_wm, "Wallet Management", "Manage customers wallet and transactions")
			Container(om_sender, "Order Sender", "Sends orders to the exchange")
			Container(om_receiver, "Order Receiver", "Receive order responses and trade events from the exchange")
			Container(om_rabbit, "Event Hub", "RabbitMq", "Events about orders and trades", $tags="events")
			Container(om_kafka, "Event Hub", "Kafka", "Events about order and trade results", $tags="events")
			ContainerDb(om_db, "OM Database", "MSSQL")
			ContainerDb(om_cm_db, "CM Database", "MSSQL")
			ContainerDb(om_pm_db, "PM Database", "MSSQL")
			ContainerDb(om_wm_db, "WM Database", "MSSQL")
			Rel(om_cc, om_api, "Request for commission calculations")
			Rel(om_cm, om_api, "Get customer trading code information")
			BiRel(om_api, om_pm, "Get the customer's portfolio and assets")
			BiRel(om_wm, om_api, "Get the customer's wallet information")
			Rel(om_api, om_sender, "Create an order request")
			Rel(om_sender, kucoin, "Send requests to exchange")
			Rel(kucoin, om_receiver, "Receive order and trade events")
			BiRel(om_cm, om_cm_db, "Persist")
			BiRel(om_pm, om_pm_db, "Persist")
			BiRel(om_wm, om_wm_db, "Persist")
			BiRel(om_api, om_db, "Persist")
			Rel(om_receiver, om_db, "Persist")
			Rel(om_receiver, om_rabbit, "Publish")
			Rel(om_api, om_kafka, "Publish")
			Rel(om_rabbit, om_api, "Subscribe")
		}

		System_Boundary(md, "Market Data") {
			Container(data_provider, "Data Provider", "Receive data from hubs and publish on a queue")
			Container(rabbitmq, "Message Bus", "RabbitMq", "", $tags="events")
			Container(data_distributer, "Data Distributer", ".NET7 Web Api", "Distribute data among market data service(s)")
			Container(rabbitmq_1, "Message Bus 1", "RabbitMq", "", $tags="events")
			Container(md_service, "Service", ".NET6 Worker", "Process, persist and publish public data among the system")
			Container(md_api, "Api", ".NET6 Web Api", "Aggregate required data for client's usage")
			ContainerDb(db, "Database", "MSSQL Database")
			ContainerDb(redis, "Key/Value database", "Redis")
			Container(kafka, "Event Hub", "Kafka", "Events about (price, orderbook) updates)", $tags="events")
			Rel(data_provider, rabbitmq, "Ordered information")
			Rel(rabbitmq, data_distributer, "Subscribe")
			Rel(data_distributer, rabbitmq_1, "Puts it in a separate queue")
			Rel(rabbitmq_1, md_service, "Subscribe")
			Rel(md_service, kafka, "Emit events")
			Rel(md_service, db, "Persist")
			Rel(md_service, redis, "Persist")
			Rel(db, md_api, "Read data")
			Rel(redis, md_api, "Read data")
			Rel(kucoin, data_provider, "Public data")
		}

		System_Boundary(gw, "OMS Gateway") {
			Container(oms_gw, "Gateway", ".NET6 Web Api", "Internal gateway which supply the internal systems")
			Rel(md_api, oms_gw, "")
			BiRel(om_api, oms_gw, "")
			BiRel(om_cm, oms_gw, "")
			Rel(om_api, md_api, "Data")
		}
	}

	System_Boundary(ot_boundary, "Online Trading") {
		Container(ot, "Online Trading", "Allows customers to make trades and view reports about trades.")
		Container(ot_wl, "Watchlist", "Customer watchlist management system")
		ContainerDb(ot_wl_db, "WL Database", "MSSQL")
		BiRel(ot, ot_wl, "Make trades, views reports")
		BiRel(oms_gw, ot, "Make trades, views reports")
		Rel(kafka, ot, "Subscription")
		Rel(om_kafka, ot, "Subscription")
		BiRel(ot_wl, ot_wl_db, "Persist")
	}
}

Person(trader, "Trader", "A customer of the Online Trading System.")
BiRel(trader, ot, "Make trades, views reports")

Lay_U(oms, kucoin)
Lay_D(ot, trader)

@enduml
